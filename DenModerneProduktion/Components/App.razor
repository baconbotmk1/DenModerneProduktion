@inject UserSession userSession

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="DenModerneProduktion.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
    <HeadOutlet @rendermode="@InteractiveServer" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <!-- Add chart.js reference if chart components are used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add sortable.js reference if SortableList component is used in your application. -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="mpegts.js"></script>
    <script src="https://vjs.zencdn.net/8.22.0/video.min.js"></script>
    <script type="text/javascript">let maxLength = 0;
	    var hls;

	    const SECONDS_IN_DAY = 86400;

        function loadFeed(videoSrc)
        {
            var video = document.getElementById('video');
	        if (Hls.isSupported()) {
		        hls = new Hls();
		        hls.loadSource(videoSrc);
		        hls.attachMedia(video);
		        //hls.on(Hls.Events.MANIFEST_PARSED, function () {
			        //video.play();
		        //});
		        hls.on(Hls.Events.LEVEL_LOADED, function () {
			        maxLength = this.levelController.currentLevel.details.totalduration;

			        let duration = this.levelController.currentLevel.details.totalduration
			        let strDur = "" + (( duration / SECONDS_IN_DAY ) * 100 ) + "%";

			        $("#timeline-duration")[0].width = strDur;
		        });
	        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
		        video.src = videoSrc;
		        video.addEventListener('loadedmetadata', () => {
			        video.play();
		        });
	        }
        }</script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    public static List<string> NonInteractivePaths { get; set; } = new List<string>
    {
        "/login",
        "/register",
        "/forgotpassword",
        "/resetpassword",
        "/confirmemail",
        "/confirmemailchange"
    };

    private IComponentRenderMode? RenderModeForPage
    {
        get {
            if (NonInteractivePaths.Any(p => HttpContext.Request.Path.StartsWithSegments(p)))
            {
                return null;
            }

            if (HttpContext.GetEndpoint()?.Metadata.GetMetadata<RenderModeAttribute>() != null)
            {
                return HttpContext.GetEndpoint()?.Metadata.GetMetadata<RenderModeAttribute>()!.Mode;
            }

            return RenderMode.InteractiveServer;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await userSession.Init();

        await base.OnInitializedAsync();
    }
}