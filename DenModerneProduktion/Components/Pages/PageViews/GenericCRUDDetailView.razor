@typeparam TType where TType : BaseModel
@typeparam TDTO where TDTO : class, new()

@using System.Diagnostics
@using DenModerneProduktion.Services
@using Shared.DTOs
@using Shared.Models
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager

<div class="card w-50">
    <div class="card-header">
        <h3>@(ItemID == 0 ? CreateTitle : UpdateTitle(ItemID))</h3>

    </div>
    <div class="card-body">
        <div class="mb-2">
            <span class="form-label">Navn</span>
            <input @bind-value="name" required name="name" placeholder="Navn" type="text" class="form-control" />
        </div>
        <div class="mb-2">
            <span class="form-label">Beskrivelse</span>
            <input @bind-value="desc" name="desc" placeholder="Beskrivelse" type="text" class="form-control" />
        </div>
    </div>
    <div class="card-footer">
        <button @onclick="() => Create()" class="@(ItemID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
        <button @onclick="() => Update()" class="@(ItemID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    [Parameter]
    public string CreateTitle { get; set; } = "Create new EXAMPLE";
    [Parameter]
    public Func<int, string> UpdateTitle { get; set; } = new Func<int, string>((int id) => "Update EXAMPLE #" + id);

    [Parameter]
    public CRUDDetailOptions Options { get; set; } = new CRUDDetailOptions();

    [Parameter]
    public string Link { get; set; } = "admin/EXAMPLE";

    [Parameter]
    public string APIEndpoint { get; set; } = "api/EXAMPLE";

    [Parameter]
    public RenderFragment? Headers { get; set; } = null;

    [Parameter]
    public RenderFragment<TType> Rows { get; set; }

    [Parameter]
    public bool ShowEdit { get; set; } = true;

    public string name { get; set; } = "";
    public string desc { get; set; } = "";

    public int ItemID => Int32.TryParse(id, out int res) ? res : 0;

    protected override async Task OnInitializedAsync()
    {
        if (ItemID != 0)
        {
            var response = await requester.Get<TType>(APIEndpoint + "/" + ItemID);

            TType? item = response is AcceptedResponse<TType> ? ((AcceptedResponse<TType>)response).Data : null;

            if (item != null)
            {
                //name = item.Name;
                //desc = item.Desc;
            }
            else
            {
                navigationManager.NavigateTo(Link);
            }
        }
    }


    async public Task Create()
    {
        viewHelper.ShowLoader(Options.TextLoadingCreate);

        /*TType? newItem = await requester.Post<TType>(APIEndpoint, new TDTO()
            {
                Name = name,
                Desc = desc
            });

        Debug.WriteLine($"Creating permission with name {name} and desc {desc}");

        viewHelper.HideLoader();

        if (newPermission != null && newPermission.Id != null)
        {
            navigationManager.NavigateTo($"/admin/permissions/{newPermission.Id}");
            return;
        }*/
    }

    async public Task Update()
    {
        viewHelper.ShowLoader(Options.TextLoadingUpdate);

        /*TType? updatedItem = await requester.Put<TType>(APIEndpoint + "/" + ItemID, new TDTO()
            {
                Name = name,
                Desc = desc
            });

        viewHelper.HideLoader();

        if (updatedItem != null)
        {
            name = updatedItem.Name;
            desc = updatedItem.Desc;
        }*/
    }


    public class CRUDDetailOptions
    {
        public string TextLoadingCreate { get; set; } = "Opretter...";
        public string TextLoadingUpdate { get; set; } = "Opdaterer...";
    }
}
