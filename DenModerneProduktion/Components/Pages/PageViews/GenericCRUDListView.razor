@typeparam TType where TType : BaseModel

@using DenModerneProduktion.Components.Pages.PageViews
@using DenModerneProduktion.Services
@using Shared.Models
@using System.Diagnostics
@inject ApiRequester requester
@inject ViewHelper viewHelper

<h3>@Title</h3>
<div class="d-flex flex-row justify-content-between">
    <span class="fs-6 fst-italic">@Subtitle</span>

    <div class="text-end">
        <a href="@Link/new">
            <button class="btn btn-sm btn-primary">Opret ny</button>
        </a>
    </div>
</div>
<hr/>
<table class="table table-sm">
    <thead>
        <tr>
            @Headers
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (TType item in Items ?? new List<TType>())
        {
            <tr>
                @Rows(item)
                <td style="text-align:end">
                    @if(ShowEdit)
                    {
                        <a href="@Link/@item.Id">
                            <button class="btn-outline-primary btn btn-sm">Rediger</button>
                        </a>
                    }
                    @if (ShowDelete)
                    {
                        <button @onclick="() => TryDelete(item)" class="btn-outline-danger btn btn-sm">Slet</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<ConfirmModal @ref="modal" />


@code {
    [Parameter]
    public string Title { get; set; } = "EXAMPLES";

    [Parameter]
    public string Subtitle { get; set; } = "EXAMPLE Subtitle";

    [Parameter]
    public string Link { get; set; } = "admin/EXAMPLES";

    [Parameter]
    public string APIEndpoint { get; set; } = "api/EXAMPLES";

    [Parameter]
    public RenderFragment? Headers { get; set; } = null;

    [Parameter]
    public RenderFragment<TType> Rows { get; set; }

    [Parameter]
    public bool ShowDelete { get; set; } = true;
    [Parameter]
    public bool ShowEdit { get; set; } = true;

    [Parameter]
    public Func<TType,string> DeleteMessage { get; set; } = new Func<TType, string>((TType e) => "Slet ID #" + e.Id + "?");

    protected List<TType>? Items { get; set; } = new List<TType>();
    protected override async Task OnInitializedAsync()
    {
        viewHelper.ShowLoader("Henter " + Title.ToLower() + "...");

        var response = await requester.Get<List<TType>>(APIEndpoint);

        if(response.StatusCode != 200)
        {
            viewHelper.Alert(response.Message);
            return;
        }

        Items = ((Shared.Responses.AcceptedResponse<List<TType>>)response).Data;

        if (Items == null)
        {
            Items = new List<TType>();
        }

        viewHelper.HideLoader();
    }


    private ConfirmModal modal = default!;

    private async Task TryDelete(TType item)
    {
        modal
            .SetConfirmAction(async () =>
            {
                await DeleteItem(item);
            })
            .SetTitle(DeleteMessage.Invoke(item));

        await modal.Show();

    }

    private async Task DeleteItem(TType item)
    {
        viewHelper.ShowLoader();

        await requester.Delete(APIEndpoint + "/" + item.Id);
        await viewHelper.NavUpdate.Invoke();

        await OnInitializedAsync();

        StateHasChanged();

        viewHelper.HideLoader();
    }
}
