@page "/admin/security_groups/{id}"
@using System.Diagnostics
@using DenModerneProduktion.Services
@using Shared.DTOs
@using Shared.Models
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager

<div class="card w-50">
    <div class="card-header">
        <h3>@(SecurityGroupID == 0 ? "Ny Sikkerhedsgruppe" : "Sikkerhedsgruppe #" + SecurityGroupID)</h3>

    </div>
    <div class="card-body">
        <div class="mb-2">
            <span class="form-label">Navn</span>
            <input @bind-value="name" required name="name" placeholder="Navn" type="text" class="form-control" />
        </div>
        <div class="mb-2">
            <span class="form-label">Beskrivelse</span>
            <input @bind-value="desc" name="desc" placeholder="Beskrivelse" type="text" class="form-control" />
        </div>
    </div>
    <div class="card-footer">
        <button @onclick="() => Create()" class="@(SecurityGroupID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
        <button @onclick="() => Update()" class="@(SecurityGroupID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    public string name { get; set; } = "";
    public string desc { get; set; } = "";

    public int SecurityGroupID => Int32.TryParse(id, out int res) ? res : 0;

    protected override async Task OnInitializedAsync()
    {
        if (SecurityGroupID != 0)
        {
            var response = await requester.Get<SecurityGroup>("api/security_groups/" + SecurityGroupID);

            SecurityGroup? securityGroup = response is AcceptedResponse<SecurityGroup> ? ((AcceptedResponse<SecurityGroup>)response).Data : null;

            if (securityGroup != null)
            {
                name = securityGroup.Name;
                desc = securityGroup.Desc;
            }
            else
            {
                navigationManager.NavigateTo("admin/security_groups");
            }
        }
    }


    async public Task Create()
    {
        viewHelper.ShowLoader("Opretter sikkerhedsgruppe...");

        var response = await requester.Post<SecurityGroup>("api/security_groups", new CreateSecurityGroupDTO()
        {
            Name = name,
            Desc = desc
        });

        SecurityGroup? newSecurityGroup = response is AcceptedResponse<SecurityGroup> ? ((AcceptedResponse<SecurityGroup>)response).Data : null;

        viewHelper.HideLoader();

        if (newSecurityGroup != null && newSecurityGroup.Id != null)
        {
            navigationManager.NavigateTo($"/admin/security_groups/{newSecurityGroup.Id}");
            return;
        }
    }

    async public Task Update()
    {
        viewHelper.ShowLoader("Opdatere sikkerhedsgruppe...");

        var response = await requester.Put<SecurityGroup>("api/security_groups/" + SecurityGroupID, new CreateSecurityGroupDTO()
        {
            Name = name,
            Desc = desc
        });

        SecurityGroup? updatedSecurityGroup = response is AcceptedResponse<SecurityGroup> ? ((AcceptedResponse<SecurityGroup>)response).Data : null;

        viewHelper.HideLoader();

        if (updatedSecurityGroup != null)
        {
            name = updatedSecurityGroup.Name;
            desc = updatedSecurityGroup.Desc;
        }
    }
}
