@page "/admin/security_groups/{id}"
@using System.Diagnostics
@using DenModerneProduktion.Components.Helpers
@using DenModerneProduktion.Services
@using Shared.DTOs.SecurityGroup
@using Shared.Models
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager
<PageTitle>Sikkerhedsgrupper</PageTitle>

<div class="row">
    <div class="col-xl-6 col-12">
        <div class="card w-100">
            <div class="card-header">
                <h3>@(SecurityGroupID == 0 ? "Ny Sikkerhedsgruppe" : "Sikkerhedsgruppe #" + SecurityGroupID)</h3>

            </div>
            <div class="card-body">
                <div class="mb-2">
                    <span class="form-label">Navn</span>
                    <input @bind-value="name" required name="name" placeholder="Navn" type="text" class="form-control" />
                </div>
                <div class="mb-2">
                    <span class="form-label">Beskrivelse</span>
                    <input @bind-value="desc" name="desc" placeholder="Beskrivelse" type="text" class="form-control" />
                </div>
            </div>
            <div class="card-footer">
                <button @onclick="() => Create()" class="@(SecurityGroupID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
                <button @onclick="() => Update()" class="@(SecurityGroupID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
            </div>
        </div>
    </div>
    @if (SecurityGroupID != 0)
    {
    <div class="col-xl-6 col-12 md-4 md-xl-0">
        <div class="card w-100">
            <div class="card-header">
                <h3>Rettigheder</h3>

            </div>
            <div class="card-body">
                <table class="w-100 table">
                    @foreach (Permission permission in (Item.SecurityGroupPermissions.Count() > 0 ? Item.SecurityGroupPermissions.Select(e => e.Permission) : new List<Permission>()))
                    {
                        <tr>
                            <td>@permission.Id</td>
                            <td>@permission.Name</td>
                            <td>
                                <div class="float-end">
                                    <button class="btn btn-sm btn-danger">
                                        <Icon Name="IconName.Trash" Color="IconColor.White" Size="IconSize.x5" class="js-nav-icon" @onclick="async ()=>await ConfirmDelete(ReferenceType.Permission, permission.Id)" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <div class="card-footer">
                <button @onclick="() => BeginAddingPermission()" class="@(SecurityGroupID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Tilføj rettighed</button>
            </div>
        </div>
        <div class="card w-100 mt-4">
            <div class="card-header">
                <h3>Brugere</h3>

            </div>
            <div class="card-body">
                <table class="w-100 table">
                    @foreach (User user in (Item.UserSecurityGroups.Count() > 0 ? Item.UserSecurityGroups.Select(e => e.User) : new List<User>()))
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td>
                                <div class="float-end">
                                    <button class="btn btn-sm btn-danger">
                                        <Icon Name="IconName.Trash" Color="IconColor.White" Size="IconSize.x5" class="js-nav-icon" @onclick="async ()=>await ConfirmDelete(ReferenceType.User, user.Id)" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <div class="card-footer">
                <button @onclick="() => BeginAddingUser()" class="@(SecurityGroupID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Tilføj bruger</button>
            </div>
        </div>

        <div class="card w-100 mt-4">
            <div class="card-header">
                <h3>Lokaler</h3>

            </div>
            <div class="card-body">
                <table class="w-100 table">
                    @foreach (Room room in (Item.SecurityGroupRooms.Count() > 0 ? Item.SecurityGroupRooms.Select(e => e.Room) : new List<Room>()))
                    {
                        <tr>
                            <td>@room.Id</td>
                            <td>@room.Name</td>
                            <td>
                                <div class="float-end">
                                    <button class="btn btn-sm btn-danger">
                                        <Icon Name="IconName.Trash" Color="IconColor.White" Size="IconSize.x5" class="js-nav-icon" @onclick="async ()=>await ConfirmDelete(ReferenceType.Room, room.Id)" />
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <div class="card-footer">
                <button @onclick="() => BeginAdding(ReferenceType.Room)" class="@(SecurityGroupID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Tilføj lokale</button>
            </div>
        </div>
    </div>
    }
</div>

<GenericModal @ref="AddNewModal" SubmitText="Tilføj" Inputs="AddNewModalInputs"/>
<GenericModal @ref="AddPermissionModal" SubmitText="Tilføj" Title="Tilføj Rettighed" Inputs="addPermissionInputs" OnSubmitAsync="HandleModalSubmit" />
<GenericModal @ref="AddUserModal" SubmitText="Tilføj" Title="Tilføj Bruger" Inputs="addUserInputs" OnSubmitAsync="HandleUserModalSubmit" />
<ConfirmModal @ref="ConfirmModalRef" />

@code {
    public SecurityGroup Item { get; set; } = new SecurityGroup();

        [Parameter]
        public string id { get; set; }

        public string name { get; set; } = "";
        public string desc { get; set; } = "";

        public int SecurityGroupID => Int32.TryParse(id, out int res) ? res : 0;

        public List<Permission> AllPermissions { get; set; } = new List<Permission>();
        public List<User> AllUsers { get; set; } = new List<User>();

        public List<Permission> RemainingPermissions => AllPermissions.Where(e => !(Item ?? new SecurityGroup()).SecurityGroupPermissions.Select(e2 => e2.PermissionId).Contains(e.Id)).ToList();
        public List<User> RemainingUsers => AllUsers.Where(e => !(Item ?? new SecurityGroup()).UserSecurityGroups.Select(e2 => e2.UserId).Contains(e.Id)).ToList();

        private ConfirmModal ConfirmModalRef;

        private GenericModal AddNewModal;
        private List<ModalInput> AddNewModalInputs { get; set; } = new List<ModalInput>();

        protected override async Task OnInitializedAsync()
        {
            await LoadPage();
        }

        async public Task LoadPage()
        {
            var response = await requester.Get<SecurityGroup>("api/security_groups/" + SecurityGroupID);

            if (response.Status >= 400)
            {
                viewHelper.Alert("Noget gik galt, genindlæs siden og prøv igen...");
                return;
            }

            SecurityGroup? securityGroup = response is AcceptedResponse<SecurityGroup> ? ((AcceptedResponse<SecurityGroup>)response).Data : null;
            if(securityGroup == null)
            {
                navigationManager.NavigateTo("admin/security_groups", true);
            }

            if(AllPermissions.Count() == 0)
            {
                var response2 = await requester.Get<List<Permission>>("api/permissions");
                AllPermissions = response2.TryGetData<List<Permission>>() ?? new List<Permission>();
            }

            if (AllUsers.Count() == 0)
            {
                var response3 = await requester.Get<List<User>>("api/users");
                AllUsers = response3.TryGetData<List<User>>() ?? new List<User>();
            }


            Item = securityGroup!;
            name = securityGroup!.Name;
            desc = securityGroup!.Desc ?? "";

            StateHasChanged();
        }


        async public Task Create()
        {
            viewHelper.ShowLoader("Opretter sikkerhedsgruppe...");

            var response = await requester.Post<SecurityGroup>("api/security_groups", new CreateSecurityGroupDTO()
            {
                Name = name,
                Desc = desc
            });

            SecurityGroup? newSecurityGroup = response is AcceptedResponse<SecurityGroup> ? ((AcceptedResponse<SecurityGroup>)response).Data : null;

            var response2 = await requester.Get<List<Permission>>("api/permissions");

            if (response.Status >= 400 || response2.Status >= 400)
            {
                viewHelper.Alert("Noget gik galt, genindlæs siden og prøv igen...");
                return;
            }

            AllPermissions = response2.TryGetData<List<Permission>>() ?? new List<Permission>();

            viewHelper.HideLoader();

            if (newSecurityGroup != null && newSecurityGroup.Id != null)
            {
                navigationManager.NavigateTo($"/admin/security_groups/{newSecurityGroup.Id}");
                return;
            }
        }

        async public Task Update()
        {
            viewHelper.ShowLoader("Opdatere sikkerhedsgruppe...");

            var response = await requester.Put<SecurityGroup>("api/security_groups/" + SecurityGroupID, new CreateSecurityGroupDTO()
            {
                Name = name,
                Desc = desc
            });

            await LoadPage();

            viewHelper.HideLoader();
        }

        public enum ReferenceType
        {
            Permission = 1,
            User = 2,
            Section = 3,
            Room = 4
        }

        public async Task ConfirmDelete(ReferenceType type, int id )
        {
            switch (type)
            {
                case ReferenceType.User:
                    ConfirmModalRef
                        .SetConfirmAction(async () =>
                        {
                            var userResponse = await requester.Delete($"api/users/{id}/security_group/" + SecurityGroupID);
                            if (userResponse.IsSuccessResponse)
                            {
                                await LoadPage();
                            }
                        })
                        .SetTitle($"Slet {id}?");

                    await ConfirmModalRef.Show();
                    break;
                case ReferenceType.Permission:
                    ConfirmModalRef
                        .SetConfirmAction(async () =>
                        {
                            var permissionResponse = await requester.Delete($"api/security_groups/{SecurityGroupID}/permission/" + id);
                            if (permissionResponse.IsSuccessResponse)
                            {
                                await LoadPage();
                            }
                        })
                        .SetTitle($"Slet {id}?");

                    await ConfirmModalRef.Show();
                    break;

                case ReferenceType.Section:
                    ConfirmModalRef
                        .SetConfirmAction(async () =>
                        {
                            var sectionResponse = await requester.Delete($"api/security_groups/{SecurityGroupID}/section/" + id);
                            if (sectionResponse.IsSuccessResponse)
                            {
                                await LoadPage();
                            }
                        })
                        .SetTitle($"Slet {id}?");

                    await ConfirmModalRef.Show();
                    break;

                case ReferenceType.Room:
                    ConfirmModalRef
                        .SetConfirmAction(async () =>
                        {
                            var roomResponse = await requester.Delete($"api/security_groups/{SecurityGroupID}/room/" + id);
                            if (roomResponse.IsSuccessResponse)
                            {
                                await LoadPage();
                            }
                        })
                    .SetTitle($"Slet {id}?");

                    await ConfirmModalRef.Show();
                    break;
            }
        }


        private GenericModal AddPermissionModal;
        private List<ModalInput> addPermissionInputs { get; set; } = new List<ModalInput>();

        private async Task BeginAddingPermission()
        {
            addPermissionInputs = new List<ModalInput>()
        {
            new ModalInput
            {
                Name = "permission", Label = "Rettighed", DType = InputType.Select,
                Options = RemainingPermissions.OrderByDescending(e => e.Name).Select(e => new Option(e.Name, e.Id.ToString())).ToList()
            }
        };

            await AddPermissionModal.Show();
        }

        private async Task<bool> HandleModalSubmit(Dictionary<string, ModalInput> inputs)
        {

            string permission = (string)inputs["permission"].Value ?? "";

            var response = await requester.Post($"api/security_groups/{SecurityGroupID}/permission/" + permission, null);

            if (response.IsSuccessResponse)
            {
                await LoadPage();
                return true;
            }
            else
            {
                inputs["permission"].Error = "[ERROR] " + response.Status.ToString() + ": " + response.Message;

                return false;
            }
        }


        private GenericModal AddUserModal;
        private List<ModalInput> addUserInputs { get; set; } = new List<ModalInput>();

        private async Task BeginAddingUser()
        {
            addUserInputs = new List<ModalInput>()
            {
                new ModalInput
                {
                    Name = "user", Label = "Bruger", DType = InputType.Select,
                    Options = RemainingUsers.OrderByDescending(e => e.Name).Select(e => new Option(e.Name, e.Id.ToString())).ToList()
                }
            };

            await AddUserModal.Show();
        }

        private async Task<bool> HandleUserModalSubmit(Dictionary<string, ModalInput> inputs)
        {
            string user_id = (string)inputs["user"].Value ?? "";

            var response = await requester.Post($"api/users/{user_id}/security_group/" + SecurityGroupID, null);

            if (response.IsSuccessResponse)
            {
                await LoadPage();
                return true;
            }
            else
            {
                inputs["user"].Error = "[ERROR] " + response.Status.ToString() + ": " + response.Message;

                return false;
            }
        }

        public async Task BeginAdding( ReferenceType type )
        {
            if(type == ReferenceType.Permission)
            {
            }

            if (type == ReferenceType.User)
            {
            }

            if (type == ReferenceType.Section)
            {
            }

            if (type == ReferenceType.Room)
            {
                AddNewModal.OnSubmitAsync = async (Dictionary<string, ModalInput> inputs) =>
                {
                    string user_id = (string)inputs["user"].Value ?? "";

                    var response = await requester.Post($"api/users/{user_id}/security_group/" + SecurityGroupID, null);

                    if (response.IsSuccessResponse)
                    {
                        await LoadPage();
                        return true;
                    }
                    else
                    {
                        inputs["user"].Error = "[ERROR] " + response.Status.ToString() + ": " + response.Message;

                        return false;
                    }
                };
                AddNewModal.Title = "Tilføj nyt lokale";
                AddNewModalInputs = new List<ModalInput>()
                {
                                    new ModalInput
                                    {
                                        Name = "room", Label = "Lokale", DType = InputType.Select,
                                        Options = RemainingUsers.OrderByDescending(e => e.Name).Select(e => new Option(e.Name, e.Id.ToString())).ToList()
                                    },
                                    new ModalInput
                                    {
                                        Name = "add_timelimit", Label = "Tilføj begrænsning?", DType = InputType.Bool
                                    }
                };

                AddNewModal.Update();

                await AddNewModal.Show();
            }
        }
    }
