@page "/admin/rooms/{id}"
@using System.Diagnostics
@using DenModerneProduktion.Services
@using Shared.DTOs.Room
@using Shared.Models
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager

<div class="card w-50">
    <div class="card-header">
        <h3>@(RoomID == 0 ? "Nyt lokale" : "Lokale #" + RoomID)</h3>

    </div>
    <div class="card-body">
        <div class="mb-2">
            <span class="form-label">Navn</span>
            <input @bind-value="Name" required name="name" placeholder="Navn" type="text" class="form-control" />
        </div>
        <div class="mb-2">
            <span class="form-label">Sektion</span>
            <input @bind-value="SectionID" name="section" placeholder="Sektion" type="text" class="form-control" />
        </div>
    </div>
    <div class="card-footer">
        <button @onclick="() => Create()" class="@(RoomID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
        <button @onclick="() => Update()" class="@(RoomID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
    </div>
</div>

@code {
    [Parameter]
    public string ID { get; set; }

    public string Name { get; set; } = "";
    public string SectionID { get; set; } = "";

    public int RoomID => Int32.TryParse(ID, out int res) ? res : 0;

    protected override async Task OnInitializedAsync()
    {
        if (RoomID != 0)
        {
            Room? room = (await requester.Get<Room>("api/rooms/" + RoomID)).Data;

            if (room != null)
            {
                Name = room.Name;
                SectionID = room.SectionId.ToString();
            }
            else
            {
                navigationManager.NavigateTo("admin/rooms");
            }
        }
    }


    async public Task Create()
    {
        viewHelper.ShowLoader("Opretter lokale...");

        Room? newSecurityGroup = (await requester.Post<Room>("api/rooms", new CreateRoom()
            {
                Name = Name,
                SectionId = int.Parse(SectionID)
            })).Data;

        viewHelper.HideLoader();

        if (newSecurityGroup != null && newSecurityGroup.Id != null)
        {
            navigationManager.NavigateTo($"/admin/rooms/{newSecurityGroup.Id}");
            return;
        }
    }

    async public Task Update()
    {
        viewHelper.ShowLoader("Opdatere lokale...");

        Room? updatedSecurityGroup = (await requester.Put<Room>("api/rooms/" + RoomID, new CreateRoom()
            {
                Name = Name,
                SectionId = int.Parse(SectionID)
            })).Data;

        viewHelper.HideLoader();

        if (updatedSecurityGroup != null)
        {
            Name = updatedSecurityGroup.Name;
            SectionID = updatedSecurityGroup.SectionId.ToString();
        }
    }
}
