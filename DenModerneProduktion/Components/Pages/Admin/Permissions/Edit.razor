@page "/admin/permissions/{id}"
@using System.Diagnostics
@using DenModerneProduktion.Services
@using Shared.DTOs
@using Shared.Models
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager

<div class="card w-50">
    <div class="card-header">
        <h3>@(PermissionID == 0 ? "Ny Rettighed" : "Rettighed #" + PermissionID)</h3>

    </div>
    <div class="card-body">
        <div class="mb-2">
            <span class="form-label">Navn</span>
            <input @bind-value="name" required name="name" placeholder="Navn" type="text" class="form-control" />
        </div>
        <div class="mb-2">
            <span class="form-label">Beskrivelse</span>
            <input @bind-value="desc" name="desc" placeholder="Beskrivelse" type="text" class="form-control" />
        </div>
    </div>
    <div class="card-footer">
        <button @onclick="() => Create()" class="@(PermissionID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
        <button @onclick="() => Update()" class="@(PermissionID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    public string name { get; set; } = "";
    public string desc { get; set; } = "";

    public int PermissionID => Int32.TryParse(id, out int res) ? res : 0;

    protected override async Task OnInitializedAsync()
    {
        if(PermissionID != 0)
        {
            Permission? permission = (await requester.Get<Permission>("api/permissions/" + PermissionID)).Data;

            if (permission != null)
            {
                name = permission.Name;
                desc = permission.Desc;
            }
            else
            {
                navigationManager.NavigateTo("admin/permissions");
            }
        }
    }


    async public Task Create()
    {
        viewHelper.ShowLoader("Opretter rettighed...");


        Permission? newPermission = (await requester.Post<Permission>("api/permissions", new CreatePermissionDTO()
        {
            Name = name,
            Desc = desc
        })).Data;

        Debug.WriteLine($"Creating permission with name {name} and desc {desc}");

        viewHelper.HideLoader();

        if (newPermission != null && newPermission.Id != null)
        {
            navigationManager.NavigateTo($"/admin/permissions/{newPermission.Id}");
            return;
        }
    }

    async public Task Update()
    {
        viewHelper.ShowLoader("Opdatere rettighed...");

        Debug.WriteLine($"Updating permission {name} with id {PermissionID} and desc {desc}");

        Permission? updatedPermission = (await requester.Put<Permission>("api/permissions/" + PermissionID, new CreatePermissionDTO()
        {
            Name = name,
            Desc = desc
        })).Data;

        viewHelper.HideLoader();

        if (updatedPermission != null)
        {
            name = updatedPermission.Name;
            desc = updatedPermission.Desc;
        }
    }
}
