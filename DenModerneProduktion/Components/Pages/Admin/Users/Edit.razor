@page "/admin/users/{id}"
@using System.Diagnostics
@using DenModerneProduktion.Services
@using Shared.DTOs.User
@using Shared.Models
@using System.Text.Json;
@using DenModerneProduktion.Components.Helpers;
@inject ApiRequester requester
@inject ViewHelper viewHelper
@inject NavigationManager navigationManager

<div class="d-flex flex-row">
    <div class="card w-50 me-5">
        <div class="card-header">
            <h3>@(UserID == 0 ? "Ny Bruger" : "Bruger #" + UserID)</h3>

        </div>
        <div class="card-body">
            <InputWithValidation @ref="NameField" ParentList="@Inputs" IsRequired="@true" Type="text" Name="name" @bind-value="@Name" />
        </div>
        <div class="card-footer">
            <button @onclick="() => Create()" class="@(UserID == 0 ? "" : "d-none") float-end btn btn-sm btn-success">Opret</button>
            <button @onclick="() => Update()" class="@(UserID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Gem</button>
        </div>
    </div>
    @if(UserID != 0)
    {
    <div class="card w-50">
        <div class="card-header">
            <h3>Sikkerhedsgrupper</h3>

        </div>
        <div class="card-body">
            
        </div>
        <div class="card-footer">
            <button @onclick="() => BeginAddingSecurityGroup()" class="@(UserID != 0 ? "" : "d-none") float-end btn btn-sm btn-primary">Tilføj sikkerhedsgruppe</button>
        </div>
    </div>
    }
</div>

<Modal @ref="AddSecurityGroupModal" ShowCloseButton="true" CloseOnEscape="true" Title="Tilføj Sikkerhedsgruppe">
</Modal>

@code {
    [Parameter]
    public string id { get; set; }
    public User? Item { get; set; }

    public string Name { get; set; } = "";
    public InputWithValidation NameField { get; set; }

    public int UserID => Int32.TryParse(id, out int res) ? res : 0;

    public Dictionary<string, InputBase> Inputs { get; set; } = new Dictionary<string, InputBase>();

    public List<SecurityGroup> AllSecurityGroups { get; set; } = new List<SecurityGroup>();

    public List<SecurityGroup> RemainingSecurityGroups => AllSecurityGroups.Where(e => !(Item ?? new User()).UserSecurityGroups.Select(e2 => e2.SecurityGroupId).Contains(e.Id)).ToList();

    protected override async Task OnInitializedAsync()
    {
        Item = new User();

        if (UserID != 0)
        {
            viewHelper.ShowLoader("Henter bruger...");

            var response = await requester.Get<User>("api/users/" + UserID);

            var response2 = await requester.Get<List<SecurityGroup>>("api/security_groups");

            if(response.Status >= 400 || response2.Status >= 400)
            {
                viewHelper.Alert("Noget gik galt, genindlæs siden og prøv igen...");
                return;
            }

            AllSecurityGroups = response2.TryGetData<List<SecurityGroup>>() ?? new List<SecurityGroup>();

            viewHelper.HideLoader();

            User? user = response.TryGetData<User>();

            if (user != null)
            {
                Item = user;
                Name = user.Name;
            }
            else
            {
                navigationManager.NavigateTo("admin/users");
            }
        }
    }


    async public Task Create()
    {
        // Reset all error messages on fields.
        Inputs.ToList().ForEach(i => i.Value.SetError(""));

        viewHelper.ShowLoader("Opretter bruger...");

        var response = await requester.Post<User>("api/users", new CreateUser()
        {
            Name = Name,
        });

        viewHelper.HideLoader();

        if (!response.IsSuccessResponse)
        {
            var errorContent = ((ErrorResponse)response).Title;
            var validationError = JsonSerializer.Deserialize<Shared.Responses.ApiValidationError>(errorContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            // Now you can access validationError.Errors["Name"], etc.
            foreach (var error in validationError.Errors)
            {

                string loweredKey = error.Key.ToLower();
                if (Inputs.ContainsKey(loweredKey))
                {
                    Inputs[loweredKey].SetError(string.Join(", ", error.Value));
                }
            }

            return;
        }

        User? newUser = response is AcceptedResponse<User> ? ((AcceptedResponse<User>)response).Data : null;

        if (response.StatusCode > 200 || response.StatusCode < 200)
        {
            viewHelper.Alert(response.Message);

            return;
        }

        if (newUser != null && newUser.Id != null)
        {
            navigationManager.NavigateTo($"/admin/users/{newUser.Id}");
            return;
        }
    }

    async public Task Update()
    {
        // Reset all error messages on fields.
        Inputs.ToList().ForEach(i => i.Value.SetError(""));

        viewHelper.ShowLoader("Opdatere bruger...");

        var response = await requester.Put<User>("api/users/" + UserID, new CreateUser()
        {
            Name = Name,
        });

        viewHelper.HideLoader();

        if (!response.IsSuccessResponse)
        {
            var errorContent = ((ErrorResponse)response).Title;
            var validationError = JsonSerializer.Deserialize<Shared.Responses.ApiValidationError>(errorContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            // Now you can access validationError.Errors["Name"], etc.
            foreach (var error in validationError.Errors)
            {

                string loweredKey = error.Key.ToLower();
                if (Inputs.ContainsKey(loweredKey))
                {
                    Inputs[loweredKey].SetError(string.Join(", ", error.Value));
                }
            }

            return;
        }

        User? updatedUser = ((Shared.Responses.AcceptedResponse<User>)response).Data;

        if (updatedUser != null)
        {
            Name = updatedUser.Name;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Debug.WriteLine("Entries: " + Inputs.Keys.Count());
        foreach (KeyValuePair<string, InputBase> input in Inputs)
        {
            Debug.WriteLine(input.Key + ": " + input.Value.Name);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    public Modal AddSecurityGroupModal { get; set; }

    async public Task BeginAddingSecurityGroup()
    {
        var parameters = new Dictionary<string, object>();

        parameters.Add("Inputs", new List<InputBase>()
        {
            new SelectWithValidation()
            {
                Name = "security_group",
                Title = "Sikkerhedsgruppe",
                IsRequired = true,
                Options = RemainingSecurityGroups.OrderByDescending(e => e.Name).Select(e => new SelectWithValidation.Option()
                {
                    Text = e.Name,
                    Value = e.Id.ToString()
                }),

            }
        });

        parameters.Add("OnSubmit", new Action<SubmitModal>(( SubmitModal submitModal ) =>
        {

        }));

        await AddSecurityGroupModal.ShowAsync<SubmitModal>(title: "Tilføj Sikkerhedsgruppe", parameters: parameters);
    }
}
