@using System.Security.Claims
@using DenModerneProduktion.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization
@using Shared.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiRequester requester
@inject ViewHelper viewHelper
@page "/admin/"
<PageTitle>Admin</PageTitle>


<div class="js-admin-index">
    <h1>Admin frontpage</h1>
    <div class="js-alarm-list">
        <div class="js-alarm-card">
            <h2>Nærhedssensor</h2>
            <div class="js-alarm-card-list">
                @* @foreach (var device in MotionDevices)
                {
                    <p>@(device.Device.Room.Name) - @(device.Timestamp)</p>
                } *@
            </div>
        </div>
        <div class="js-alarm-card">
            <h2>Temperatur</h2>
            <div class="js-alarm-card-list">
                @foreach (var device in TemperatureDevices)
                {
                    <p>@device.RoomName - @($"{device.Info.Select(x => double.Parse(x.Value, NumberStyles.Any, CultureInfo.InvariantCulture)).Average()}{device.Info.First().Type.Suffix}")</p>
                }
            </div>
            <div class="js-alarm-card-global-limit">
                <h4>Global Limit</h4>
                <div>
                    <div class="js-alarm-card-global-limit-min">
                        <label for="js-min-humid-limit">Minimum</label>
                        <InputNumber id="js-min-humid-limit" @bind-Value="MinimumTemperatureLimit" />
                    </div>
                    <div class="js-alarm-card-global-limit-max">
                        <label for="js-max-humid-limit">Maximum</label>
                        <InputNumber id="js-max-humid-limit" @bind-Value="MaxTemperatureLimit" />
                    </div>
                </div>
            </div>
        </div>
        <div class="js-alarm-card">
            <h2>Fugtighed</h2>
            <div class="js-alarm-card-list">
                @foreach (var device in HumidityDevices)
                {
                    <p>@device.RoomName - @($"{device.Info.Select(x => double.Parse(x.Value, NumberStyles.Any, CultureInfo.InvariantCulture)).Average()}{device.Info.First().Type.Suffix}")</p>
                }
            </div>
            <div class="js-alarm-card-global-limit">
                <h4>Global Limit</h4>
                <div>
                    <div class="js-alarm-card-global-limit-min">
                        <label for="js-min-humid-limit">Minimum</label>
                        <InputNumber id="js-min-humid-limit" @bind-Value="MinimumHumidityLimit" />
                    </div>
                    <div class="js-alarm-card-global-limit-max">
                        <label for="js-max-humid-limit">Maximum</label>
                        <InputNumber id="js-max-humid-limit" @bind-Value="MaximumHumidityLimit"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<DeviceData> MotionDevices { get; set; } = new();
    private List<Data> TemperatureDevices { get; set; } = new();
    private List<Data> HumidityDevices { get; set; } = new();

    public double MinimumTemperatureLimit { get; set; } = 18.2;
    public double MaxTemperatureLimit { get; set; } = 22.5;

    public double MinimumHumidityLimit { get; set; } = 25;
    public double MaximumHumidityLimit { get; set; } = 75;

    public List<Shared.Models.Room> AccessibleRooms { get; set; } = new();
    private ClaimsPrincipal user;
    public bool IsLoading { get; set; } = true;

    private DeviceData GetRoomData(Shared.Models.Room item, int type) => item.Devices.FirstOrDefault(x => x.Data.Where(y => y.Type.Id == type).Count() > 0)?.Data.FirstOrDefault(x => x.Type.Id == type);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        await GetAccessibleRoomsAsync();
    }
    private async Task GetAccessibleRoomsAsync()
    {
        IsLoading = true;
        StateHasChanged();
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.First(x => x.Type == ClaimTypes.Sid).Value;
            var response = await requester.Get<List<Shared.Models.Room>>($"api/users/{userId}/rooms/data");
            if (response.StatusCode != 200)
            {
                viewHelper.Alert(response.Message);
                return;
            }

            AccessibleRooms = ((Shared.Responses.AcceptedResponse<List<Shared.Models.Room>>)response).Data;

            TemperatureDevices = AccessibleRooms.Select(x => new Data()
                {
                    RoomName = x.Name,
                    Info = x.Devices.Where(y=>y.TypeId == 2).SelectMany(y=>y.Infos).ToList()
                }).ToList();

            HumidityDevices = AccessibleRooms.Select(x => new Data()
                {
                    RoomName = x.Name,
                    Info = x.Devices.Where(y => y.TypeId == 3).SelectMany(y => y.Infos).ToList()
                }).ToList();

            // MotionDevices = AccessibleRooms.Select(x => x.Devices.Where(y => y.TypeId == 4)).ToList();

        IsLoading = false;
            StateHasChanged();
        }
    }
    private class Data()
    {
        public string RoomName { get; set; }
        public List<DeviceInfo> Info { get; set; }
    }
}

    