@page "/admin/device_types"
@using DenModerneProduktion.Components.Pages.PageViews
@using DenModerneProduktion.Components.Pages.PageModels
@using DenModerneProduktion.Services
@using Shared.DTOs.DeviceDataType
@using Shared.DTOs.DeviceEventType
@using Shared.DTOs.DeviceInfoType
@using Shared.DTOs.DeviceSharedCategory
@using Shared.DTOs.DeviceType
@using Shared.Models
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Web
@inject ApiRequester requester
@inject ViewHelper viewHelper

<Tabs>
    <Tab Title="Enhedstyper" IsActive="true">
        <Content>
            <div>
                <button @onclick="OpenCreateDeviceTypeModal" class="btn btn-sm btn-success">Opret ny enhedstype</button>
            </div>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th style="width:80px;">ID</th>
                        <th>Navn</th>
                        <th>Beskrivelse</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DeviceType item in DeviceTypes)
                    {
                        <tr class="bg-primary">
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td style="text-align:end">
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </Content>
    </Tab>
    <Tab Title="Data-typer" IsActive="false">
        <Content>
            <div>
                <button @onclick="OpenCreateCategoryModal" class="btn btn-sm btn-success">Ny Kategori</button>
                <button @onclick="OpenCreateDataTypeModal" class="btn btn-sm btn-success">Ny Data-Type</button>
            </div>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th style="width:80px;">ID</th>
                        <th>Kategori</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DeviceSharedCategory item in Categories)
                    {
                        <tr class="bg-primary">
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td style="text-align:end">
                            </td>
                        </tr>

                        @foreach (DeviceDataType item2 in item.DataTypes)
                        {
                            <tr>
                                <td>@item2.Id</td>
                                <td>@item2.Name</td>
                                <td style="text-align:end">
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </Content>
    </Tab>
    <Tab Title="Info-typer" IsActive="false">
        <Content>
            <div>
                <button @onclick="OpenCreateCategoryModal" class="btn btn-sm btn-success">Ny Kategori</button>
                <button @onclick="OpenCreateInfoTypeModal" class="btn btn-sm btn-success">Ny Info-Type</button>
            </div>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th style="width:80px;">ID</th>
                        <th>Kategori</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DeviceSharedCategory item in Categories)
                    {
                        <tr class="bg-primary">
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td style="text-align:end">
                            </td>
                        </tr>

                        @foreach (DeviceInfoType item2 in item.InfoTypes)
                        {
                            <tr>
                                <td>@item2.Id</td>
                                <td>@item2.Name</td>
                                <td style="text-align:end">
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </Content>
    </Tab>
    <Tab Title="Event-typer" IsActive="false">
        <Content>
            <div>
                <button @onclick="OpenCreateCategoryModal" class="btn btn-sm btn-success">Ny Kategori</button>
                <button @onclick="OpenCreateEventTypeModal" class="btn btn-sm btn-success">Ny Event-Type</button>
            </div>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th style="width:80px;">ID</th>
                        <th>Kategori</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DeviceSharedCategory item in Categories)
                    {
                        <tr class="bg-primary">
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td style="text-align:end">
                            </td>
                        </tr>

                        @foreach (DeviceEventType item2 in item.EventTypes)
                        {
                            <tr>
                                <td>@item2.Id</td>
                                <td>@item2.Name</td>
                                <td style="text-align:end">
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </Content>
    </Tab>
</Tabs>

<Modal @ref="modal" />

<GenericModal Title="Opret enhedstype" @ref="createDeviceTypeModal" Inputs="createDeviceTypeModalInputs" OnSubmitAsync="DoCreateDeviceType"></GenericModal>
<GenericModal Title="Opret kategori" @ref="createCategoryModal" Inputs="createCategoryModalInputs" OnSubmitAsync="DoCreateCategory"></GenericModal>
<GenericModal Title="Opret data-type" @ref="createDataTypeModal" Inputs="createDataTypeModalInputs" OnSubmitAsync="DoCreateDataType"></GenericModal>
<GenericModal Title="Opret info-type" @ref="createInfoTypeModal" Inputs="createInfoTypeModalInputs" OnSubmitAsync="DoCreateInfoType"></GenericModal>
<GenericModal Title="Opret event-type" @ref="createEventTypeModal" Inputs="createEventTypeModalInputs" OnSubmitAsync="DoCreateEventType"></GenericModal>

<style type="text/css">
    tr.bg-primary > td {
    background-color: lightblue;
    }
</style>

@code {
    public string Title { get; set; } = "EXAMPLES";
    public string Subtitle { get; set; } = "EXAMPLE Subtitle";
    public string Link { get; set; } = "admin/EXAMPLES";
    public string APIEndpoint { get; set; } = "api/shared_";

    public bool ShowDelete { get; set; } = true;
    public bool ShowEdit { get; set; } = true;

    protected List<DeviceSharedCategory>? Categories { get; set; } = new List<DeviceSharedCategory>();
    protected List<DeviceType> DeviceTypes { get; set; } = new List<DeviceType>();
    protected override async Task OnInitializedAsync()
    {
        viewHelper.ShowLoader("Henter " + Title.ToLower() + "...");

        var response = await requester.Get<List<DeviceSharedCategory>>("api/device_shared_categories");

        if (response.StatusCode != 200)
        {
            viewHelper.Alert(response.Message);
            return;
        }

        Categories = ((Shared.Responses.AcceptedResponse<List<DeviceSharedCategory>>)response).Data;

        if (Categories == null)
        {
            Categories = new List<DeviceSharedCategory>();
        }

        response = await requester.Get<List<DeviceType>>("api/device_types");

        if (response.StatusCode != 200)
        {
            viewHelper.Alert(response.Message);
            return;
        }

        DeviceTypes = ((Shared.Responses.AcceptedResponse<List<DeviceType>>)response).Data;

        if (DeviceTypes == null)
        {
            DeviceTypes = new List<DeviceType>();
        }

        StateHasChanged();

        viewHelper.HideLoader();
    }


    private Modal modal = default!;


    private GenericModal createDeviceTypeModal = default!;
    private List<ModalInput> createDeviceTypeModalInputs = new List<ModalInput>()
    {
        new ModalInput() { Name = "name", Label = "Navn", DType = InputType.Text, Required = true },
        new ModalInput() { Name = "desc", Label = "Beskrivelse", DType = InputType.TextArea },
    };
    async public Task OpenCreateDeviceTypeModal() => await createDeviceTypeModal.Show();
    async public Task<bool> DoCreateDeviceType(Dictionary<string, ModalInput> inputs)
    {
        inputs.Values.ToList().ForEach(e => e.Reset());

        if (string.IsNullOrEmpty((string?)inputs["name"].Value))
        {
            inputs["name"].Error = "Er påkrævet";
            return false;
        }

        var response = await requester.Post<DeviceType>("api/device_types", new CreateDeviceType()
        {
            Name = (string?)inputs["name"].Value ?? "",
            Desc = (string?)inputs["desc"].Value
        });

        if (!response.IsSuccessResponse)
        {
            return false;
        }


        await OnInitializedAsync();
        StateHasChanged();

        return true;
    }


    private GenericModal createCategoryModal = default!;
    private List<ModalInput> createCategoryModalInputs = new List<ModalInput>()
    {
        new ModalInput() { Name = "name", Label = "Navn", DType = InputType.Text, Required = true },
        new ModalInput() { Name = "desc", Label = "Beskrivelse", DType = InputType.TextArea },
    };
    async public Task OpenCreateCategoryModal() => await createCategoryModal.Show();
    async public Task<bool> DoCreateCategory(Dictionary<string, ModalInput> inputs)
    {
        inputs.Values.ToList().ForEach(e => e.Reset());

        if (string.IsNullOrEmpty((string?)inputs["name"].Value))
        {
            inputs["name"].Error = "Er påkrævet";
            return false;
        }

        var response = await requester.Post<DeviceType>("api/device_shared_categories", new CreateDeviceSharedCategory()
            {
                Name = (string?)inputs["name"].Value ?? "",
                Desc = (string?)inputs["desc"].Value
            });

        if (!response.IsSuccessResponse)
        {
            return false;
        }


        await OnInitializedAsync();
        StateHasChanged();

        return true;
    }


    private GenericModal createDataTypeModal = default!;
    private List<ModalInput>? createDataTypeModalInputs = null;

    async public Task OpenCreateDataTypeModal()
    {
        if(createDataTypeModalInputs == null)
        {   
            createDataTypeModalInputs = new List<ModalInput>()
            {
                new ModalInput() { Name = "name", Label = "Navn", DType = InputType.Text, Required = true },
                new ModalInput() { Name = "categoryId", Label = "Kategori", DType = InputType.Select, Required = true, Options = Categories.Select(e => new Option(e.Name, e.Id.ToString())).ToList() },
                new ModalInput() { Name = "desc", Label = "Beskrivelse", DType = InputType.TextArea },
                new ModalInput() { Name = "dataType", Label = "DataType", DType = InputType.Text, Required=true },
                new ModalInput() { Name = "suffix", Label = "Suffix", DType = InputType.Text, Required=true },
            };
            StateHasChanged();
        }

        await createDataTypeModal.Show();
    }
    async public Task<bool> DoCreateDataType(Dictionary<string, ModalInput> inputs)
    {
        inputs.Values.ToList().ForEach(e => e.Reset());

        if (string.IsNullOrEmpty((string?)inputs["name"].Value))
        {
            inputs["name"].Error = "Er påkrævet";
            return false;
        }

        var response = await requester.Post<DeviceType>("api/device_data_types", new CreateDeviceDataType()
            {
                Name = (string?)inputs["name"].Value ?? "",
                Desc = (string?)inputs["desc"].Value,
                CategoryId = int.Parse((string)inputs["categoryId"].Value),
                DataType = (string)inputs["dataType"].Value,
                Suffix = (string)inputs["suffix"].Value
            });


        if (!response.IsSuccessResponse)
        {
            return false;
        }


        await OnInitializedAsync();
        StateHasChanged();

        return true;
    }


    private GenericModal createInfoTypeModal = default!;
    private List<ModalInput>? createInfoTypeModalInputs = null;
    async public Task OpenCreateInfoTypeModal()
    {
        if (createInfoTypeModalInputs == null)
        {
            createInfoTypeModalInputs = new List<ModalInput>()
            {
                new ModalInput() { Name = "name", Label = "Navn", DType = InputType.Text, Required = true },
                new ModalInput() { Name = "categoryId", Label = "Kategori", DType = InputType.Select, Required = true, Options = Categories.Select(e => new Option(e.Name, e.Id.ToString())).ToList() },
                new ModalInput() { Name = "desc", Label = "Beskrivelse", DType = InputType.TextArea },
                new ModalInput() { Name = "dataType", Label = "DataType", DType = InputType.Text, Required=true },
            };
            StateHasChanged();
        }

        await createInfoTypeModal.Show();
    }
    async public Task<bool> DoCreateInfoType(Dictionary<string, ModalInput> inputs)
    {
        inputs.Values.ToList().ForEach(e => e.Reset());

        if (string.IsNullOrEmpty((string?)inputs["name"].Value))
        {
            inputs["name"].Error = "Er påkrævet";
            return false;
        }

        var response = await requester.Post<DeviceType>("api/device_info_types", new CreateDeviceInfoType()
            {
                Name = (string?)inputs["name"].Value ?? "",
                Desc = (string?)inputs["desc"].Value,
                CategoryId = int.Parse((string)inputs["categoryId"].Value),
                DataType = (string)inputs["dataType"].Value
            });


        if (!response.IsSuccessResponse)
        {
            return false;
        }


        await OnInitializedAsync();
        StateHasChanged();

        return true;
    }


    private GenericModal createEventTypeModal = default!;
    private List<ModalInput>? createEventTypeModalInputs = new List<ModalInput>()
    {
        new ModalInput()
        {
            Name = "name", Label = "Navn", DType = InputType.Text
        }
    };
    async public Task OpenCreateEventTypeModal()
    {
        if (createEventTypeModalInputs == null)
        {
            createEventTypeModalInputs = new List<ModalInput>()
            {
                new ModalInput() { Name = "name", Label = "Navn", DType = InputType.Text, Required = true },
                new ModalInput() { Name = "categoryId", Label = "Kategori", DType = InputType.Select, Required = true, Options = Categories.Select(e => new Option(e.Name, e.Id.ToString())).ToList() },
                new ModalInput() { Name = "desc", Label = "Beskrivelse", DType = InputType.TextArea },
            };
            StateHasChanged();
        }

        await createEventTypeModal.Show();
    }
    async public Task<bool> DoCreateEventType(Dictionary<string, ModalInput> inputs)
    {
        inputs.Values.ToList().ForEach(e => e.Reset());

        if (string.IsNullOrEmpty((string?)inputs["name"].Value))
        {
            inputs["name"].Error = "Er påkrævet";
            return false;
        }

        var response = await requester.Post<DeviceType>("api/device_event_types", new CreateDeviceEventType()
            {
                Name = (string?)inputs["name"].Value ?? "",
                Desc = (string?)inputs["desc"].Value,
                CategoryId = int.Parse((string)inputs["categoryId"].Value),
            });


        if (!response.IsSuccessResponse)
        {
            return false;
        }


        await OnInitializedAsync();
        StateHasChanged();

        return true;
    }
}
