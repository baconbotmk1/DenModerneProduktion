@rendermode InteractiveServer
@using System.Text.RegularExpressions
@using DenModerneProduktion.Services
@using Shared.DTOs.Auth
@inject ApiRequester requester
@inject NavigationManager navigationManager
<PageTitle>Forgot Password</PageTitle>
@page "/forgotpassword/{Token}"

<div class="js-forgot-pwd-container">
    <h3>Nultil adgangskode</h3>
    <InputText type="password" placeholder="Ny adgangskode" @bind-Value="@NewPassword"></InputText>
    <InputText type="password" placeholder="Bekræft ny adgangskode" @bind-Value="@ConfirmNewPassword"></InputText>
    <ul>
        <li class="@(new Regex(UppercasePattern).IsMatch(NewPassword) ? "js-valid" : "js-invalid")">Mindst et stort bogstav</li>
        <li class="@(new Regex(LowercasePattern).IsMatch(NewPassword) ? "js-valid" : "js-invalid")">Mindst et lille bogstav</li>
        <li class="@(new Regex(DigitPattern).IsMatch(NewPassword) ? "js-valid" : "js-invalid")">Mindst et tal (0-9)</li>
        <li class="@(new Regex(SymbolPattern).IsMatch(NewPassword) ? "js-valid" : "js-invalid")">Mindst et symbol (@@$!%*?&)</li>
        <li class="@(new Regex(LengthPattern).IsMatch(NewPassword) ? "js-valid" : "js-invalid")">Mindst 10 karakterer</li>
        <li class="@(NewPassword == ConfirmNewPassword && NewPassword.Count() > 0 ? "js-valid" : "js-invalid")">Adgangskoder er ikke ens</li>
    </ul>
    <button disabled="@(!(new Regex(PasswordPattern).IsMatch(NewPassword) && NewPassword == ConfirmNewPassword))" class="btn btn-primary" @onclick="async()=>await ResetPasswordAsync()">
        Nulstil kode kode
    </button>
</div>

@code {
    [Parameter]
    public string Token { get; set; }
    public string NewPassword { get; set; } = "";
    public string ConfirmNewPassword { get; set; } = "";


    /* Regex explained: 
    * Link: https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a
    * (?=.*[a-z]) [A-Za-z\d@$!%*?&] {8,}
    *      ?= - Lookahead, checks from here to end, for a match
    *      .* - check any char for a match
    *      [a-z] must include any lower case letters
    * [A-Za-z\d@$!%*?&] - List of allowed characters
    * {x,x} - minimum length, maximum length
    */
    public string PasswordPattern { get; set; } = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$";
    public string LowercasePattern { get; set; } = @"^(?=.*[a-z]).+$";
    public string UppercasePattern { get; set; } = @"^(?=.*[A-Z]).+$";
    public string DigitPattern { get; set; } = @"^(?=.*\d).+$";
    public string SymbolPattern { get; set; } = @"^(?=.*[@$!%*?&]).+$";
    public string LengthPattern { get; set; } = @"^.{8,}$";

    public async Task ResetPasswordAsync()
    {
        var response = await requester.Post($"api/auth/reset_password/{Token}", new ConfirmPasswordResetPost() {password = NewPassword, token = Token });
        var test = response.StatusCode;

        StateHasChanged();
    }
}
