@using DenModerneProduktion.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Models
@inject ViewHelper viewHelper
@inject ApiRequester requester
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/lobby"
<PageTitle>Lobby</PageTitle>
@if (IsLoading)
{
    <Spinner Class="js-spinner" Size="SpinnerSize.ExtraLarge" />
}
else
{
    <div class="js-lobby-container">
        <h1>Lobby</h1>
        <div class="js-lobby-map">Map</div>
        <div class="js-lobby-list">
            @foreach (var room in AccessibleRooms)
            {
                <div class="js-lobby-list-item">
                    <div class="js-lobby-list-item-info">
                        <p class="js-lobby-list-item-info-title">@room.Name</p>
                        <div class="js-lobby-list-item-info-data">
                            <p class="js-lobby-list-item-info-data-temperature">Temperatur: <span>@($"{GetRoomData(room,2)?.Value ?? "N/A"}{GetRoomData(room,2)?.Type?.Suffix}")</span></p>
                            <p class="js-lobby-list-item-info-data-humidity">Fugtighed: <span>@($"{GetRoomData(room, 3)?.Value ?? "N/A"}{GetRoomData(room, 3)?.Type?.Suffix}")</span></p>
                        </div>
                    </div>
                    <div class="js-lobby-list-item-icon"><Icon Name="IconList[CustomCount++ % IconList.Count]" Size="IconSize.x4" Style="@($"color:#{GenerateHexColor()}")" /></div>
                    <div class="js-lobby-list-item-accessible-timespan">08:00-16:00</div>
                </div>
            }
        </div>
    </div>
}

@code {
    public int CustomCount { get; set; } = 0;
    public List<IconName> IconList { get; set; } = new() { IconName.CircleFill, IconName.TriangleFill, IconName.ExclamationSquareFill, IconName.ExclamationOctagonFill, IconName.SquareFill, IconName.BalloonFill, IconName.BatteryFull, IconName.BellFill, IconName.CheckSquareFill, IconName.CloudFill };
    public List<Shared.Models.Room> AccessibleRooms { get; set; } = new();
    public bool IsLoading { get; set; } = true;
    private ClaimsPrincipal user;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            IsLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        viewHelper.NavUpdate += async () => await GetAccessibleRoomsAsync();
        await GetAccessibleRoomsAsync();
    }
    private DeviceData GetRoomData(Shared.Models.Room item, int type) => item.Devices.FirstOrDefault(x => x.Data.Where(y => y.Type.Id == type).Count() > 0)?.Data.FirstOrDefault(x => x.Type.Id == type);
    private DeviceData GetRoomTimelimit(Shared.Models.Room item) => item.TimeLimits.Where(x=>x.Weeks);

    private async Task GetAccessibleRoomsAsync()
    {
        IsLoading = true;
        StateHasChanged();
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.First(x => x.Type == ClaimTypes.Sid).Value;
            var response = await requester.Get<List<Shared.Models.Room>>($"api/users/{userId}/rooms/data");
            if (response.StatusCode != 200)
            {
                viewHelper.Alert(response.Message);
                return;
            }

            AccessibleRooms = ((Shared.Responses.AcceptedResponse<List<Shared.Models.Room>>)response).Data;
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string GenerateHexColor()
    {
        List<int[]> rgbValues = new() {
            new int[] {255,0,0},
            new int[] {0,255,0},
            new int[] {0,0,255},
            new int[] {255,255,0},
            new int[] {255,0,255},
            new int[] {0,255,255},
        };
        int iconLoops = (CustomCount - 1) / IconList.Count;
        int rgbLoops = (iconLoops) / rgbValues.Count;

        int rVal = (int)Math.Ceiling(rgbValues[iconLoops % rgbValues.Count()][0] / Math.Pow(2, rgbLoops));
        int gVal = (int)Math.Ceiling(rgbValues[iconLoops % rgbValues.Count()][1] / Math.Pow(2, rgbLoops));
        int bVal = (int)Math.Ceiling(rgbValues[iconLoops % rgbValues.Count()][2] / Math.Pow(2, rgbLoops));
        string color = $"{rVal.ToString("X2")}{gVal.ToString("X2")}{bVal.ToString("X2")}";
        return color;
    }
}
