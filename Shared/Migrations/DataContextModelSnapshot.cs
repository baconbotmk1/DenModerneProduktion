// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared;

#nullable disable

namespace Shared.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Shared.Models.AccessCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessCards");
                });

            modelBuilder.Entity("Shared.Models.Assignables.TimeLimitAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("TimeLimitAssignment");

                    b.HasDiscriminator<string>("type").HasValue("TimeLimitAssignment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CadastreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CadastreId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Shared.Models.Cadastre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cadastres");
                });

            modelBuilder.Entity("Shared.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Shared.Models.DeviceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeviceDatas");
                });

            modelBuilder.Entity("Shared.Models.DeviceDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DeviceDataTypes");
                });

            modelBuilder.Entity("Shared.Models.DeviceEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeviceEvents");
                });

            modelBuilder.Entity("Shared.Models.DeviceEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DeviceEventTypes");
                });

            modelBuilder.Entity("Shared.Models.DeviceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeviceInfos");
                });

            modelBuilder.Entity("Shared.Models.DeviceInfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("DeviceInfoTypes");
                });

            modelBuilder.Entity("Shared.Models.DeviceRecording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Converted")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Duration")
                        .HasColumnType("REAL");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Started")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceRecordings");
                });

            modelBuilder.Entity("Shared.Models.DeviceSharedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceSharedCategories");
                });

            modelBuilder.Entity("Shared.Models.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("Shared.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Shared.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Shared.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("SecurityGroups");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("SecurityGroupDevices");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SecurityGroupId");

                    b.ToTable("SecurityGroupPermissions");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("SecurityGroupRooms");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("SecurityGroupSections");
                });

            modelBuilder.Entity("Shared.Models.TimeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TimeLimits");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("TimeLimitWeeks");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WeekId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeekId");

                    b.ToTable("TimeLimitWeekDays");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeekDayTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeekDayId");

                    b.ToTable("TimeLimitWeekDayTimes");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeLimitId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shared.Models.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("TimeLimitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("Shared.Models.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TimeLimitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRooms");
                });

            modelBuilder.Entity("Shared.Models.UserSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TimeLimitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSections");
                });

            modelBuilder.Entity("Shared.Models.UserSecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSecurityGroups");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupDeviceTL", b =>
                {
                    b.HasBaseType("Shared.Models.Assignables.TimeLimitAssignment");

                    b.Property<int>("SecurityGroupDeviceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SecurityGroupDeviceId");

                    b.HasDiscriminator().HasValue("secgrp_device");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupRoomTL", b =>
                {
                    b.HasBaseType("Shared.Models.Assignables.TimeLimitAssignment");

                    b.Property<int>("SecurityGroupRoomId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SecurityGroupRoomId");

                    b.HasDiscriminator().HasValue("secgrp_room");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupSectionTL", b =>
                {
                    b.HasBaseType("Shared.Models.Assignables.TimeLimitAssignment");

                    b.Property<int>("SecurityGroupSectionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SecurityGroupSectionId");

                    b.HasDiscriminator().HasValue("secgrp_section");
                });

            modelBuilder.Entity("Shared.Models.AccessCard", b =>
                {
                    b.HasOne("Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.Assignables.TimeLimitAssignment", b =>
                {
                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany("Assignments")
                        .HasForeignKey("TimeLimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.Building", b =>
                {
                    b.HasOne("Shared.Models.Cadastre", "Cadastre")
                        .WithMany()
                        .HasForeignKey("CadastreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cadastre");
                });

            modelBuilder.Entity("Shared.Models.Device", b =>
                {
                    b.HasOne("Shared.Models.DeviceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shared.Models.DeviceData", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany("Data")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.DeviceDataType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shared.Models.DeviceDataType", b =>
                {
                    b.HasOne("Shared.Models.DeviceSharedCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.DeviceEvent", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany("Events")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.DeviceEventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shared.Models.DeviceEventType", b =>
                {
                    b.HasOne("Shared.Models.DeviceSharedCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.DeviceInfo", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany("Infos")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.DeviceInfoType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Shared.Models.DeviceInfoType", b =>
                {
                    b.HasOne("Shared.Models.DeviceSharedCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.DeviceRecording", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Shared.Models.Room", b =>
                {
                    b.HasOne("Shared.Models.Section", "Section")
                        .WithMany("Rooms")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Shared.Models.Section", b =>
                {
                    b.HasOne("Shared.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroup", b =>
                {
                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupDevice", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.Navigation("Device");

                    b.Navigation("SecurityGroup");

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupPermission", b =>
                {
                    b.HasOne("Shared.Models.Permission", "Permission")
                        .WithMany("SecurityGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.SecurityGroup", "SecurityGroup")
                        .WithMany("SecurityGroupPermissions")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("SecurityGroup");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupRoom", b =>
                {
                    b.HasOne("Shared.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.Navigation("Room");

                    b.Navigation("SecurityGroup");

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupSection", b =>
                {
                    b.HasOne("Shared.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.Navigation("Section");

                    b.Navigation("SecurityGroup");

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeek", b =>
                {
                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany("Weeks")
                        .HasForeignKey("TimeLimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeekDay", b =>
                {
                    b.HasOne("Shared.Models.TimeLimitWeek", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Week");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeekDayTime", b =>
                {
                    b.HasOne("Shared.Models.TimeLimitWeekDay", "WeekDay")
                        .WithMany("Times")
                        .HasForeignKey("WeekDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.Navigation("TimeLimit");
                });

            modelBuilder.Entity("Shared.Models.UserDevice", b =>
                {
                    b.HasOne("Shared.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.HasOne("Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("TimeLimit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.UserRoom", b =>
                {
                    b.HasOne("Shared.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.HasOne("Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("TimeLimit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.UserSection", b =>
                {
                    b.HasOne("Shared.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.TimeLimit", "TimeLimit")
                        .WithMany()
                        .HasForeignKey("TimeLimitId");

                    b.HasOne("Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("TimeLimit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.UserSecurityGroup", b =>
                {
                    b.HasOne("Shared.Models.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.User", "User")
                        .WithMany("UserSecurityGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupDeviceTL", b =>
                {
                    b.HasOne("Shared.Models.SecurityGroupDevice", "SecurityGroupDevice")
                        .WithMany("TimeLimits")
                        .HasForeignKey("SecurityGroupDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroupDevice");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupRoomTL", b =>
                {
                    b.HasOne("Shared.Models.SecurityGroupRoom", "SecurityGroupRoom")
                        .WithMany()
                        .HasForeignKey("SecurityGroupRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroupRoom");
                });

            modelBuilder.Entity("Shared.Models.Assignables.SecurityGroupSectionTL", b =>
                {
                    b.HasOne("Shared.Models.SecurityGroupSection", "SecurityGroupSection")
                        .WithMany()
                        .HasForeignKey("SecurityGroupSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroupSection");
                });

            modelBuilder.Entity("Shared.Models.Device", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Events");

                    b.Navigation("Infos");
                });

            modelBuilder.Entity("Shared.Models.Permission", b =>
                {
                    b.Navigation("SecurityGroupPermissions");
                });

            modelBuilder.Entity("Shared.Models.Section", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroup", b =>
                {
                    b.Navigation("SecurityGroupPermissions");
                });

            modelBuilder.Entity("Shared.Models.SecurityGroupDevice", b =>
                {
                    b.Navigation("TimeLimits");
                });

            modelBuilder.Entity("Shared.Models.TimeLimit", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeek", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Shared.Models.TimeLimitWeekDay", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Navigation("UserSecurityGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
